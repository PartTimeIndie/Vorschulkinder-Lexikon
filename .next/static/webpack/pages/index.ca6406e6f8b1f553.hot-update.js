"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Character.js":
/*!*********************************!*\
  !*** ./components/Character.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _s = $RefreshSig$();\n\n\n// Statische Variable um sicherzustellen dass Character nur EINMAL initialisiert wird\nlet characterInitialized = false;\nconst Character = (param)=>{\n    let { currentContext = \"idle\", onEmotionChange } = param;\n    _s();\n    const [currentEmotion, setCurrentEmotion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"idle\");\n    const [isRotating, setIsRotating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [rotationPhase, setRotationPhase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"idle\"); // 'idle', 'out', 'in'\n    const [availableEmotions, setAvailableEmotions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        \"idle\",\n        \"curious\"\n    ]);\n    const [hasLoaded, setHasLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(characterInitialized); // Für initiale Fly-In Animation - einmal für immer\n    const [lastProcessedContext, setLastProcessedContext] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // Verhindert mehrfache Emotion-Wechsel\n    const [lastEmotionChangeTime, setLastEmotionChangeTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // Cooldown für Emotion-Changes\n    const autoResetTimer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const emotionChangeTimer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Character-Bilder-Varianten definieren\n    const characterVariants = {\n        idle: [\n            \"/Characters/Character-idle.png\",\n            \"/Characters/Character-idle-2.png\",\n            \"/Characters/Character-idle-3.png\"\n        ],\n        excited: [\n            \"/Characters/Character-excited.png\",\n            \"/Characters/Character-excited-2.png\",\n            \"/Characters/Character-excited-3.png\"\n        ],\n        curious: [\n            \"/Characters/Character-curious.png\",\n            \"/Characters/Character-curious-2.png\",\n            \"/Characters/Character-curious-3.png\"\n        ],\n        surprised: [\n            \"/Characters/Character-surprised.png\",\n            \"/Characters/Character-surprised-2.png\",\n            \"/Characters/Character-surprised-3.png\"\n        ],\n        thinking: [\n            \"/Characters/Character-thinking.png\",\n            \"/Characters/Character-thinking-2.png\",\n            \"/Characters/Character-thinking-3.png\"\n        ],\n        laughing: [\n            \"/Characters/Character-laughing.png\",\n            \"/Characters/Character-laughing-2.png\"\n        ],\n        exploring: [\n            \"/Characters/Character-excited.png\",\n            \"/Characters/Character-excited-2.png\",\n            \"/Characters/Character-excited-3.png\"\n        ],\n        scared: [\n            \"/Characters/Character-surprised.png\",\n            \"/Characters/Character-surprised-2.png\",\n            \"/Characters/Character-surprised-3.png\"\n        ]\n    };\n    // State für gewählte Variante pro Emotion\n    const [selectedVariant, setSelectedVariant] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"/Characters/Character-idle.png\");\n    // Zufällige Variante für Emotion wählen und speichern (NIEMALS die gleiche)\n    const selectVariantForEmotion = (emotion)=>{\n        const variants = characterVariants[emotion] || characterVariants.idle;\n        // Wenn nur eine Variante vorhanden, diese nehmen\n        if (variants.length === 1) {\n            const variant = variants[0];\n            setSelectedVariant(variant);\n            return variant;\n        }\n        // Aktuelle Variante rausfiltern um Wiederholung zu vermeiden\n        const otherVariants = variants.filter((variant)=>variant !== selectedVariant);\n        // Falls alle Varianten die gleiche sind (sollte nicht passieren), erste nehmen\n        if (otherVariants.length === 0) {\n            const variant = variants[0];\n            setSelectedVariant(variant);\n            return variant;\n        }\n        // Zufällige andere Variante wählen\n        const randomVariant = otherVariants[Math.floor(Math.random() * otherVariants.length)];\n        setSelectedVariant(randomVariant);\n        return randomVariant;\n    };\n    // Zufällige Emotion aus verfügbaren Emotionen wählen\n    const getRandomEmotion = function() {\n        let emotions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : availableEmotions;\n        const filtered = emotions.filter((e)=>e !== currentEmotion);\n        if (filtered.length === 0) return emotions[0];\n        return filtered[Math.floor(Math.random() * filtered.length)];\n    };\n    // Emotion-Wechsel mit ursprünglicher Flip-Animation\n    const changeEmotion = function(newEmotion) {\n        let immediate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        console.log(\"\\uD83C\\uDFAD Emotion change: \".concat(currentEmotion, \" → \").concat(newEmotion, \" (immediate: \").concat(immediate, \")\"));\n        if (newEmotion === currentEmotion) {\n            console.log(\"\\uD83C\\uDFAD Same emotion, skipping\");\n            return;\n        }\n        if (immediate) {\n            // Direkter Wechsel ohne Animation\n            console.log(\"\\uD83C\\uDFAD Immediate change to \".concat(newEmotion));\n            setCurrentEmotion(newEmotion);\n            selectVariantForEmotion(newEmotion);\n            return;\n        }\n        // Flip-Animation: Raus -> Bild wechseln -> Rein\n        console.log(\"\\uD83C\\uDFAD Starting flip animation: out → change → in\");\n        setIsRotating(true);\n        setRotationPhase(\"out\");\n        // Nach Raus-Animation (150ms): Bild wechseln\n        setTimeout(()=>{\n            console.log(\"\\uD83C\\uDFAD Flip animation: Changing image to \".concat(newEmotion));\n            setCurrentEmotion(newEmotion);\n            selectVariantForEmotion(newEmotion);\n            setRotationPhase(\"in\");\n            // Nach Rein-Animation (150ms): Animation beenden\n            setTimeout(()=>{\n                console.log(\"\\uD83C\\uDFAD Flip animation: Complete!\");\n                setRotationPhase(\"idle\");\n                setIsRotating(false);\n            }, 150);\n        }, 150);\n    };\n    // Auto-Reset entfernt - Character wechselt nur bei Interaktionen\n    // Context-abhängige Emotionen laden\n    const loadContextEmotions = async (context)=>{\n        console.log(\"\\uD83C\\uDFAD loadContextEmotions called with context: '\".concat(context, \"' (lastProcessed: '\").concat(lastProcessedContext, \"')\"));\n        try {\n            const response = await fetch(\"/api/character/random-emotion/\".concat(context));\n            const data = await response.json();\n            if (data.emotions) {\n                setAvailableEmotions(data.emotions);\n                // Cooldown prüfen: Keine Emotion-Wechsel wenn der letzte vor weniger als 2 Sekunden war\n                const now = Date.now();\n                const timeSinceLastChange = now - lastEmotionChangeTime;\n                const EMOTION_COOLDOWN = 2000; // 2 Sekunden Cooldown\n                console.log(\"\\uD83C\\uDFAD Context check: context=\".concat(context, \", lastProcessed=\").concat(lastProcessedContext, \", cooldown=\").concat(timeSinceLastChange, \"ms\"));\n                if (context !== \"idle\" && context !== lastProcessedContext && timeSinceLastChange >= EMOTION_COOLDOWN) {\n                    console.log(\"\\uD83C\\uDFAD TRIGGERING emotion change for context '\".concat(context, \"'\"));\n                    const randomEmotion = data.emotions[Math.floor(Math.random() * data.emotions.length)];\n                    changeEmotion(randomEmotion, false); // Mit Flip-Animation\n                    setLastProcessedContext(context); // Merke dass wir diesen Context schon verarbeitet haben\n                    setLastEmotionChangeTime(now); // Setze Cooldown-Timer\n                } else if (context === lastProcessedContext) {\n                    console.log(\"\\uD83C\\uDFAD BLOCKED: Context '\".concat(context, \"' already processed\"));\n                } else if (timeSinceLastChange < EMOTION_COOLDOWN) {\n                    console.log(\"\\uD83C\\uDFAD BLOCKED: Cooldown active (\".concat(timeSinceLastChange, \"ms < \").concat(EMOTION_COOLDOWN, \"ms)\"));\n                } else if (context === \"idle\") {\n                    // Bei idle-Context: Reset lastProcessedContext für nächste Interaktion (aber kein Cooldown Reset)\n                    console.log(\"\\uD83C\\uDFAD RESET: Idle context, clearing lastProcessedContext\");\n                    setLastProcessedContext(null);\n                // Character wird NICHT neu instanziert, nur hasLoaded bleibt true\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading context emotions:\", error);\n            setAvailableEmotions([\n                \"idle\",\n                \"curious\"\n            ]);\n        }\n    };\n    // Zufälliges Lachen abspielen (ohne Voice-Overs zu unterbrechen)\n    const playRandomLaughter = ()=>{\n        const laughterFiles = [\n            \"/audio/LaughingKid/laughing-1.wav\",\n            \"/audio/LaughingKid/laughing-2.wav\",\n            \"/audio/LaughingKid/laughing-3.wav\",\n            \"/audio/LaughingKid/laughing-4.wav\",\n            \"/audio/LaughingKid/laughing-5.wav\",\n            \"/audio/LaughingKid/laughing-6.wav\",\n            \"/audio/LaughingKid/laughing-7.wav\"\n        ];\n        // Zufällige Lacher-Datei auswählen\n        const randomLaughter = laughterFiles[Math.floor(Math.random() * laughterFiles.length)];\n        try {\n            // SEPARATES Audio-Element für Lacher (nicht global!)\n            const laughterAudio = new Audio(randomLaughter);\n            laughterAudio.volume = 0.7; // Etwas leiser als Voice-Overs\n            laughterAudio.play().catch((err)=>{\n                console.log(\"Lacher-Audio autoplay verhindert:\", err);\n            });\n            console.log(\"\\uD83E\\uDD23 Lacher abgespielt:\", randomLaughter);\n        } catch (error) {\n            console.error(\"Lacher-Audio-Fehler:\", error);\n        }\n    };\n    // Character antippen - Rotation, Emotion-Wechsel UND Lachen\n    const handleCharacterClick = ()=>{\n        // Zu laughing oder excited wechseln, aber NIEMALS die aktuelle Emotion\n        const happyEmotions = [\n            \"laughing\",\n            \"excited\"\n        ];\n        let randomHappyEmotion;\n        // Andere Emotion wählen als die aktuelle\n        if (currentEmotion === \"laughing\") {\n            randomHappyEmotion = \"excited\";\n        } else if (currentEmotion === \"excited\") {\n            randomHappyEmotion = \"laughing\";\n        } else {\n            // Wenn weder laughing noch excited, zufällig wählen\n            randomHappyEmotion = happyEmotions[Math.floor(Math.random() * happyEmotions.length)];\n        }\n        changeEmotion(randomHappyEmotion, false); // Mit Flip-Animation\n        setLastEmotionChangeTime(Date.now()); // Cooldown-Timer auch bei direktem Character-Klick setzen\n        // Zufälliges Lachen abspielen (parallel zu Voice-Overs)\n        playRandomLaughter();\n        // Callback für Emotion-Änderung\n        if (onEmotionChange) {\n            onEmotionChange(randomHappyEmotion);\n        }\n    };\n    // Initial Fly-In Animation starten - NUR EINMAL in der gesamten App-Laufzeit\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!characterInitialized) {\n            console.log(\"\\uD83C\\uDFAD Character FIRST TIME INITIALIZATION\");\n            characterInitialized = true; // Setze statische Variable\n            // Nach kurzer Verzögerung Character reinfliegen lassen\n            const loadTimer = setTimeout(()=>{\n                setHasLoaded(true);\n            }, 300);\n            return ()=>clearTimeout(loadTimer);\n        } else {\n            console.log(\"\\uD83C\\uDFAD Character ALREADY INITIALIZED - skipping fly-in\");\n        }\n    }, []);\n    // Context-Änderungen überwachen - mit Ref um doppelte Aufrufe zu verhindern\n    const lastContextRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (currentContext && currentContext !== lastContextRef.current) {\n            console.log(\"\\uD83C\\uDFAD Processing NEW context: '\".concat(currentContext, \"'\"));\n            lastContextRef.current = currentContext;\n            loadContextEmotions(currentContext);\n        }\n    }, [\n        currentContext\n    ]);\n    // Cleanup Timer\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            if (autoResetTimer.current) clearTimeout(autoResetTimer.current);\n            if (emotionChangeTimer.current) clearTimeout(emotionChangeTimer.current);\n        };\n    }, []);\n    // Animation-Klassen bestimmen\n    const getAnimationClasses = ()=>{\n        let classes = \"character-image\";\n        // Initial Fly-In Animation beim ersten Laden\n        if (!hasLoaded) {\n            classes += \" character-fly-in\";\n            return classes;\n        }\n        // Rotation-Animation hat Priorität\n        if (rotationPhase === \"out\") {\n            classes += \" character-rotate-out\";\n        } else if (rotationPhase === \"in\") {\n            classes += \" character-rotate-in\";\n        } else if (rotationPhase === \"idle\" && !isRotating) {\n            // Subtile Loop-Animation nur wenn wirklich idle\n            classes += \" character-subtle-animation\";\n        }\n        return classes;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"character-container\",\n        onClick: handleCharacterClick,\n        title: \"Character antippen f\\xfcr Emotionen!\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_2___default()), {\n            src: selectedVariant,\n            alt: \"Character \".concat(currentEmotion),\n            width: 120,\n            height: 150,\n            className: getAnimationClasses(),\n            priority: true,\n            unoptimized: true\n        }, void 0, false, {\n            fileName: \"D:\\\\gitrepros\\\\Vorschulkinder Lexikon\\\\components\\\\Character.js\",\n            lineNumber: 304,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"D:\\\\gitrepros\\\\Vorschulkinder Lexikon\\\\components\\\\Character.js\",\n        lineNumber: 299,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Character, \"7RY+bcYwtpsnjABeJzl27sr45rk=\");\n_c = Character;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Character); // Cache-Refresh: Updated Character Animation and removed isBouncing \nvar _c;\n$RefreshReg$(_c, \"Character\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Character.js\n"));

/***/ })

});
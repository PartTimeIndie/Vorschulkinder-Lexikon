"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/assetCache.js":
/*!*****************************!*\
  !*** ./utils/assetCache.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAllAssetCache: function() { return /* binding */ clearAllAssetCache; },\n/* harmony export */   clearAllCachesDeep: function() { return /* binding */ clearAllCachesDeep; },\n/* harmony export */   clearCachedAsset: function() { return /* binding */ clearCachedAsset; },\n/* harmony export */   extractAllReferencedAssetUrls: function() { return /* binding */ extractAllReferencedAssetUrls; },\n/* harmony export */   getCachedAsset: function() { return /* binding */ getCachedAsset; },\n/* harmony export */   getCachedAssetAsBlob: function() { return /* binding */ getCachedAssetAsBlob; },\n/* harmony export */   getCachedAudioAsBlob: function() { return /* binding */ getCachedAudioAsBlob; },\n/* harmony export */   getCachedJson: function() { return /* binding */ getCachedJson; },\n/* harmony export */   getOfflineAssetFileList: function() { return /* binding */ getOfflineAssetFileList; }\n/* harmony export */ });\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb-keyval */ \"./node_modules/idb-keyval/dist/index.js\");\n\nfunction getCacheKey(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    return \"assetcache_\".concat(url, \"_\").concat(version);\n}\n/**\r\n * Fetches an asset (image, audio, etc.) from cache or downloads and stores it as a Base64 string.\r\n * @param {string} url - The asset URL.\r\n * @param {string} version - Optional version string for cache busting.\r\n * @returns {Promise<string>} - Base64 string of the asset.\r\n */ async function getCachedAsset(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    if (!url || url === \"null\" || url === \"/null\") return null;\n    const cacheKey = getCacheKey(url, version);\n    try {\n        const cached = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.get)(cacheKey);\n        if (cached) return cached;\n    } catch (e) {\n        console.warn(\"AssetCache: IndexedDB not available\", e);\n    }\n    // Fetch and cache asset as Base64\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Asset download failed: \" + url);\n    const blob = await response.blob();\n    const base64 = await new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onloadend = ()=>resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n    try {\n        await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.set)(cacheKey, base64);\n    } catch (e) {\n        console.warn(\"AssetCache: IndexedDB full or error, cannot cache asset\", e);\n    }\n    return base64;\n}\n/**\r\n * Removes a cached asset from IndexedDB.\r\n * @param {string} url - The asset URL.\r\n * @param {string} version - Optional version string for cache busting.\r\n */ async function clearCachedAsset(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    const cacheKey = getCacheKey(url, version);\n    await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.del)(cacheKey);\n}\n/**\r\n * Fetches a JSON file from cache or downloads and stores it as a string.\r\n * @param {string} url - The JSON URL.\r\n * @param {string} version - Optional version string for cache busting.\r\n * @returns {Promise<any>} - Parsed JSON object.\r\n */ async function getCachedJson(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    // Cache-Busting für zentrale JSONs\n    if ( true && (url.includes(\"/kategorien/tiere.json\") || url.includes(\"/eintraege/tierEintraege.json\"))) {\n        const sep = url.includes(\"?\") ? \"&\" : \"?\";\n        url = url + sep + \"v=\" + Date.now();\n    }\n    const cacheKey = getCacheKey(url, version) + \"_json\";\n    try {\n        const cached = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.get)(cacheKey);\n        if (cached) return JSON.parse(cached);\n    } catch (e) {\n        console.warn(\"AssetCache: IndexedDB not available\", e);\n    }\n    // Fetch and cache JSON as text\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"JSON download failed: \" + url);\n    const text = await response.text();\n    try {\n        await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.set)(cacheKey, text);\n    } catch (e) {\n        console.warn(\"AssetCache: IndexedDB full or error, cannot cache JSON\", e);\n    }\n    return JSON.parse(text);\n}\n/**\r\n * Holt ein Asset als Blob aus dem Cache oder lädt es per fetch und speichert es als Base64 im Cache.\r\n * @param {string} url - Die Asset-URL.\r\n * @param {string} version - Optionaler Versionsstring für Cache Busting.\r\n * @returns {Promise<Blob|null>} - Das Asset als Blob oder null.\r\n */ async function getCachedAssetAsBlob(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    if (!url || url === \"null\" || url === \"/null\") return null;\n    const cacheKey = getCacheKey(url, version);\n    try {\n        const cached = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.get)(cacheKey);\n        if (cached) {\n            // cached ist ein Base64-String → in Blob umwandeln\n            const base64 = cached.split(\",\")[1];\n            const mimeString = cached.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n            const byteString = atob(base64);\n            const ab = new ArrayBuffer(byteString.length);\n            const ia = new Uint8Array(ab);\n            for(let i = 0; i < byteString.length; i++){\n                ia[i] = byteString.charCodeAt(i);\n            }\n            return new Blob([\n                ab\n            ], {\n                type: mimeString\n            });\n        }\n    } catch (e) {\n    // IndexedDB nicht verfügbar oder Fehler\n    }\n    // Fallback: fetch und als Blob speichern\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Asset download failed: \" + url);\n    const blob = await response.blob();\n    // Optional: als Base64 im Cache speichern (wie getCachedAsset)\n    const reader = new FileReader();\n    const base64 = await new Promise((resolve, reject)=>{\n        reader.onloadend = ()=>resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n    try {\n        await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.set)(cacheKey, base64);\n    } catch (e) {}\n    return blob;\n}\n/**\r\n * Holt eine Audio-Datei als Blob aus dem Cache oder lädt sie per fetch und speichert sie als Base64 im Cache.\r\n * @param {string} url - Die Audio-URL.\r\n * @param {string} version - Optionaler Versionsstring für Cache Busting.\r\n * @returns {Promise<Blob|null>} - Die Audio-Datei als Blob oder null.\r\n */ async function getCachedAudioAsBlob(url) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    if (!url || url === \"null\" || url === \"/null\") return null;\n    const cacheKey = getCacheKey(url, version);\n    try {\n        const cached = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.get)(cacheKey);\n        if (cached) {\n            // cached ist ein Base64-String → in Blob umwandeln\n            const base64 = cached.split(\",\")[1];\n            const mimeString = cached.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n            const byteString = atob(base64);\n            const ab = new ArrayBuffer(byteString.length);\n            const ia = new Uint8Array(ab);\n            for(let i = 0; i < byteString.length; i++){\n                ia[i] = byteString.charCodeAt(i);\n            }\n            return new Blob([\n                ab\n            ], {\n                type: mimeString\n            });\n        }\n    } catch (e) {\n    // IndexedDB nicht verfügbar oder Fehler\n    }\n    // Fallback: fetch und als Blob speichern\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Audio download failed: \" + url);\n    const blob = await response.blob();\n    // Optional: als Base64 im Cache speichern (wie getCachedAsset)\n    const reader = new FileReader();\n    const base64 = await new Promise((resolve, reject)=>{\n        reader.onloadend = ()=>resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n    try {\n        await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.set)(cacheKey, base64);\n    } catch (e) {}\n    return blob;\n}\n/**\r\n * Extracts all referenced image and audio asset URLs from category and animal data.\r\n * @param {object} categoryData - The main category JSON (with subcategories).\r\n * @param {object} animalData - The animal entries JSON (with tiere array).\r\n * @returns {string[]} Array of asset URLs (relative to public/)\r\n */ function extractAllReferencedAssetUrls(categoryData, animalData) {\n    const urls = new Set();\n    // Main category image/audio\n    if (categoryData.image && categoryData.image.path) urls.add(categoryData.image.path);\n    if (categoryData.audio && categoryData.audio.path) urls.add(categoryData.audio.path);\n    // Subcategories\n    if (Array.isArray(categoryData.subcategories)) {\n        for (const sub of categoryData.subcategories){\n            if (sub.image && sub.image.path) urls.add(sub.image.path);\n            if (sub.audio && sub.audio.path) urls.add(sub.audio.path);\n        }\n    }\n    // Animals\n    if (animalData && Array.isArray(animalData.tiere)) {\n        for (const animal of animalData.tiere){\n            if (animal.image && animal.image.path) urls.add(animal.image.path);\n            if (animal.audio && animal.audio.path) urls.add(animal.audio.path);\n        }\n    }\n    // Return as array, prefix with '/' for fetch\n    return Array.from(urls).map((path)=>path.startsWith(\"/\") ? path : \"/\" + path);\n}\n/**\r\n * Fetches the list of all files to be downloaded for offline use.\r\n * @returns {Promise<string[]>} Array of asset URLs (relative to public/)\r\n */ async function getOfflineAssetFileList() {\n    const res = await fetch(\"/offlineAssetFileList.json\");\n    if (!res.ok) throw new Error(\"Failed to fetch offline asset file list\");\n    return await res.json();\n}\n/**\r\n * Löscht alle gecachten Assets (Bilder, MP3s etc.) aus IndexedDB.\r\n * Wird z.B. bei Versionswechsel aufgerufen.\r\n */ async function clearAllAssetCache() {\n    const allKeys = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.keys)();\n    const assetKeys = allKeys.filter((key)=>typeof key === \"string\" && key.startsWith(\"assetcache_\"));\n    for (const key of assetKeys){\n        await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.del)(key);\n    }\n}\n/**\r\n * Löscht wirklich alle Caches: IndexedDB, LocalStorage, Caches API, Service Worker.\r\n */ async function clearAllCachesDeep() {\n    // 1. IndexedDB (wie bisher)\n    await clearAllAssetCache();\n    // 2. LocalStorage (nur relevante Keys, nicht alles!)\n    if (true) {\n        Object.keys(localStorage).forEach((key)=>{\n            if (key.startsWith(\"imgcache_\") || key.startsWith(\"klex_\") || key.startsWith(\"kinderlexikon_\")) {\n                localStorage.removeItem(key);\n            }\n        });\n    }\n    // 3. Caches API (Service Worker Cache)\n    if (\"caches\" in window) {\n        const cacheNames = await caches.keys();\n        for (const name of cacheNames){\n            await caches.delete(name);\n        }\n    }\n    // 4. Service Worker deregistrieren (optional, wird beim Reload neu registriert)\n    if (\"serviceWorker\" in navigator) {\n        const regs = await navigator.serviceWorker.getRegistrations();\n        for (const reg of regs){\n            await reg.unregister();\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/assetCache.js\n"));

/***/ })

});
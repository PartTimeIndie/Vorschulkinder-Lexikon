===============================================
KINDERLEXIKON - KOMPLETTER EINTRAG-ERSTELLUNGS-GUIDE
===============================================

Dieser Guide erklärt Schritt für Schritt, wie Sie einen vollständigen Eintrag für das Kinderlexikon erstellen - von der ersten Idee bis zum fertigen Audio-visuellen Eintrag.

ÜBERSICHT DER SCHRITTE:
======================
1. Eintrag-Text generieren (mit AI/ChatGPT)
2. Eintrag-Bild erstellen (PowerShell Script)
3. Voice-Over generieren (Node.js Script)
4. Eintrag in tierEintraege.json einpflegen

VORAUSSETZUNGEN:
===============
- OpenAI API Key (in api-key.txt gespeichert)
- PowerShell (für Bildgenerierung)
- Node.js (für Voice-Over)
- n8n Webhook für TTS läuft auf localhost:5678
- ChatGPT/AI-Zugang für Textgenerierung

SCHRITT 1: EINTRAG-TEXT GENERIEREN
==================================

1.1 PROMPT VORBEREITEN:
- Öffnen Sie tierEintragPrompt.txt
- Ersetzen Sie {TIER_NAME} mit dem gewünschten Tier (z.B. "Hund", "Katze", "Elefant")
- Kopieren Sie den kompletten Prompt

1.2 INFORMATIONS-SAMMLUNG:
⚠️  PROBLEM: Wikipedia-Suchen funktionieren oft nicht zuverlässig!

ALTERNATIVE STRATEGIE:
1. **Web-Suche versuchen**: "[Tiername] Steckbrief Größe Gewicht Lebensraum Verhalten"
   - Beispiel: "Hauskatze Steckbrief Größe Gewicht Lebensraum Verhalten"
2. **Bei Problemen**: Nutzen Sie Ihr **Allgemeinwissen** über das Tier
3. **Backup-Ansatz**: Sammeln Sie 5-7 Grundfakten aus eigenem Wissen

SAMMELN SIE:
✅ Körperbau, Größe, Gewicht (z.B. "30-40 cm groß, 3-5 kg schwer")
✅ Lebensraum und Lebensweise (z.B. "lebt als Haustier, ursprünglich wild")
✅ Nahrung (z.B. "Fleischfresser, jagt Mäuse")  
✅ Besondere Fähigkeiten (z.B. "sehr gute Nachtsicht, kann 2m hoch springen")
✅ Beziehung zu Menschen (z.B. "seit 9000 Jahren Haustier")
❌ Komplexe wissenschaftliche Details
❌ Beängstigende Aspekte

1.3 AI-GENERIERUNG:
- Gehen Sie zu ChatGPT oder einem anderen LLM
- Fügen Sie ZUERST die Wikipedia-Fakten ein
- Dann fügen Sie den Prompt ein (mit dem gewünschten Tiernamen)
- Lassen Sie den Eintrag basierend auf den recherchierten Fakten generieren

1.4 ERWARTETE AUSGABE:
```
TIER-GESCHICHTE:
[250-350 Wort Geschichte über das Tier]

CHARACTER_EMOTIONEN:
[excited,curious,surprised]

SAFETY_SCORE:
[1-10]

WIKIPEDIA_FAKTEN_VERWENDET:
[Verwendete Fakten in Stichpunkten]

BESONDERE_ERKENNTNISSE:
[2-3 Kernpunkte über das Tier]
```

1.5 TEXT NACHBEARBEITEN:
- Prüfen Sie den Text auf Kindertauglichkeit
- Stellen Sie sicher, dass der Text 250-350 Wörter hat
- Notieren Sie sich die Character-Emotionen für später

SCHRITT 2: EINTRAG-BILD ERSTELLEN
=================================

⚠️  **WICHTIG: Filename prüfen!**
Bevor Sie das Bild generieren, prüfen Sie in `tierEintraege.json` welcher filename erwartet wird!

2.1 FILENAME IN JSON PRÜFEN:
```json
"image": {
  "filename": "tier-katze.png",  // ← Dieser Name muss verwendet werden!
  "path": "images/tier-katze.png",
  "alt": "..."
}
```

2.2 POWERSHELL SCRIPT AUSFÜHREN:
```powershell
powershell -ExecutionPolicy Bypass -File .\generate-entry-image.ps1 -EntryName "Katze" -EnglishName "cute cat"
```

⚠️  **ACHTUNG**: Das Script generiert: `tier-[EntryName].png` - muss mit JSON übereinstimmen!

PARAMETER:
- EntryName: **MUSS EXAKT** dem erwarteten filename entsprechen (ohne "tier-" und ".png")
- EnglishName: **EINFACHE** englische Beschreibung (z.B. "friendly dog", "cute cat sitting", "happy rabbit")

⚠️ **PROMPT-TIPP**: Halten Sie es einfach! Keine komplexen Details wie "leuchtende Augen" oder "magische Effekte" - das sieht unnatürlich aus.

2.3 BEISPIELE:
```powershell
# Für tier_001 "Hund" (JSON erwartet: "tier-hund.png")
powershell -File .\generate-entry-image.ps1 -EntryName "Hund" -EnglishName "friendly dog"

# Für tier_002 "Katze" (JSON erwartet: "tier-katze.png")  
powershell -File .\generate-entry-image.ps1 -EntryName "Katze" -EnglishName "simple cute cat sitting"

# Für tier_012 "Eichhörnchen" (JSON erwartet: "tier-eichhoernchen.png")
powershell -File .\generate-entry-image.ps1 -EntryName "Eichhörnchen" -EnglishName "cute squirrel"
```

2.4 FILENAME-PROBLEME BEHEBEN:
Falls das generierte Bild den falschen Namen hat:
```cmd
# Beispiel: tier-hauskatze.png → tier-katze.png
move "public\images\tier-hauskatze.png" "public\images\tier-katze.png"
```

2.5 AUSGABE:
- Bild wird erstellt in: public/images/tier-[EntryName].png
- Format: 1024x1024 PNG  
- Stil: Handgezeichneter Kinderbuch-Stil (Eric Carle/Beatrix Potter)

SCHRITT 3: VOICE-OVER GENERIEREN
================================

3.1 VORAUSSETZUNG:
- Stellen Sie sicher, dass n8n Webhook läuft (localhost:5678)
- Der Eintrag muss bereits in tierEintraege.json existieren

3.2 NODE.JS SCRIPT AUSFÜHREN:
```bash
node scripts/generate-entry-voiceover.js "tier_001"
```

PARAMETER:
- Erste Parameter: ID des Eintrags in tierEintraege.json (z.B. "tier_001", "tier_002")

3.3 BEISPIELE:
```bash
# Für Eintrag mit ID "tier_001"
node scripts/generate-entry-voiceover.js "tier_001"

# Für Eintrag mit ID "tier_hund"  
node scripts/generate-entry-voiceover.js "tier_hund"
```

3.4 AUSGABE:
- Audio-Datei wird erstellt in: public/audio/tier-[slug].mp3
- Verwendet TTS mit kindgerechter Stimme
- Länge: ca. 2 Minuten basierend auf 250-350 Wörtern

SCHRITT 4: EINTRAG IN JSON EINPFLEGEN
====================================

4.1 DATEI ÖFFNEN:
- Öffnen Sie eintraege/tierEintraege.json

4.2 EINTRAG AKTUALISIEREN ODER HINZUFÜGEN:

**OPTION A: Bestehenden Eintrag aktualisieren** (wenn bereits vorhanden aber ohne Description):
- Suchen Sie das gewünschte Tier (z.B. "tier_002" für "Katze")  
- Ersetzen Sie `"description": ""` mit dem generierten Text
- Beispiel für Katze (tier_002):
```json
"description": "Hallo mein neugieriger Forscher! Heute erzähle ich dir von einem der faszinierendsten Tiere überhaupt - der Hauskatze! [... restlicher Text]"
```

**OPTION B: Komplett neuen Eintrag hinzufügen**:
```json
{
  "id": "tier_003",
  "name": "Hund",
  "slug": "hund", 
  "description": "[Hier den generierten Text aus Schritt 1 einfügen]",
  "category": "haustiere",
  "subcategories": ["haustiere", "saeugetiere"],
  "image": {
    "filename": "tier-hund.png",
    "alt": "Ein freundlicher Hund",
    "path": "images/tier-hund.png"
  },
  "audio": {
    "filename": "tier-hund.mp3", 
    "path": "audio/tier-hund.mp3"
  },
  "characterEmotions": ["excited", "curious"],
  "safetyScore": 10,
  "facts": [
    "Hunde können bis zu 300 Wörter lernen",
    "Sie haben einen extrem guten Geruchssinn",
    "Welpen werden blind geboren"
  ]
}
```

4.3 FELDER AUSFÜLLEN:
- id: Eindeutige ID (z.B. "tier_003")
- name: Deutscher Name des Tiers
- slug: URL-freundlicher Name (kleingeschrieben, keine Umlaute)
- description: Der generierte Text aus Schritt 1
- category: Hauptkategorie (z.B. "haustiere", "wildtiere")
- subcategories: Array mit passenden Unterkategorien
- image: Pfad zum generierten Bild
- audio: Pfad zur generierten Audio-Datei
- characterEmotions: Aus Schritt 1 übernommen
- safetyScore: Aus Schritt 1 übernommen
- facts: Die wichtigsten Fakten als Array

KOMPLETT-BEISPIEL: HUND-EINTRAG
===============================

1. PROMPT VERWENDEN:
```
Du bist der freundliche, etwas nerdige Forscher-Character aus dem Kinderlexikon für Vorschulkinder (3-7 Jahre). Du erzählst faszinierende Geschichten über Tiere und erweckst sie zum Leben.

Erstelle eine begeisterte, lehrreiche Geschichte über: Hund
[... restlicher Prompt aus tierEintragPrompt.txt]
```

2. BILD GENERIEREN:
```powershell
powershell -File .\generate-entry-image.ps1 -EntryName "Hund" -EnglishName "friendly dog"
```

3. JSON EINTRAG ERSTELLEN:
[Generierten Text und Metadaten in tierEintraege.json einfügen]

4. VOICE-OVER GENERIEREN:
```bash
node scripts/generate-entry-voiceover.js "tier_hund"
```

QUALITÄTSKONTROLLE:
==================
- ✅ Text ist 250-350 Wörter lang
- ✅ Text ist kindgerecht (3-7 Jahre)
- ✅ Bild ist 1024x1024 und im Kinderbuch-Stil
- ✅ **Bild-Filename stimmt mit JSON überein** (tier-[erwarteter-name].png)
- ✅ Audio ist klar und gut verständlich
- ✅ **Audio-Filename stimmt mit JSON überein** (tier-[erwarteter-name].mp3)
- ✅ JSON-Syntax ist korrekt
- ✅ Alle Pfade existieren und funktionieren
- ✅ Safety Score ist angemessen (8-10 für Kinder)

FEHLERBEHEBUNG:
==============
- **Filename-Konflikte**: Prüfen Sie JSON vs. generierte Dateinamen, verwenden Sie `move` zum Umbenennen
- **Bild wird nicht angezeigt**: Falscher filename - Bild muss exakt wie in JSON benannt sein
- **Audio wird nicht abgespielt**: Falscher filename - Audio muss exakt wie in JSON benannt sein
- API Key Fehler: Prüfen Sie api-key.txt
- PowerShell Fehler: Führen Sie als Administrator aus
- Voice-Over Fehler: Prüfen Sie n8n Webhook Status
- JSON Fehler: Verwenden Sie einen JSON-Validator

WEITERE TIERE/EINTRÄGE:
======================
Folgen Sie dem gleichen 4-Schritt-Prozess für:
- Katze, Elefant, Löwe, Giraffe (Tiere)
- Auto, Flugzeug, Schiff (Fahrzeuge) 
- Apfel, Banane, Karotte (Essen)
- Und alle anderen Einträge

Die Scripts sind universell und funktionieren für alle Arten von Einträgen! 